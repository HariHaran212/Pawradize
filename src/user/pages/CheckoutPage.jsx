import React, { useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import PageContainer from '../../components/PageContainer';
import { useCart } from '../../context/CartContext';
import apiClient from '../../api/apiClient';

// Sample data that would come from your cart state
const orderData = {
  items: [
    { id: 101, name: "Premium Dog Food 10kg", price: 1499, quantity: 1 },
    { id: 104, name: "Interactive Feather Toy", price: 299, quantity: 2 },
  ],
  subtotal: 2097,
  shipping: 0,
  tax: 377.46, // Example 18% GST
};

export default function CheckoutPage() {
  // --- 1. Get cart data, navigation, and location state ---
  const location = useLocation();
  const navigate = useNavigate();
  const { cartItems, clearCart } = useCart();

  // Determine which items to check out: from "Buy Now" state or the global cart
  const itemsToCheckout = location.state?.items || cartItems;

  // --- 2. State for forms and payment ---
  const [formData, setFormData] = useState({
      fullName: '',
      address: '',
      city: '',
      state: '',
      zipCode: '', // Changed from pincode to match backend model
      phone: '',
      country: 'India',
  });
  // const [paymentMethod, setPaymentMethod] = useState('card');
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e) => {
      const { id, value } = e.target;
      setFormData(prev => ({ ...prev, [id]: value }));
  };

  // --- 3. Recalculate totals dynamically ---
  const subtotal = itemsToCheckout.reduce((sum, item) => sum + item.price * item.quantity, 0);
  const shippingFee = subtotal > 2000 ? 0 : 50;
  const tax = subtotal * 0.18; // Example 18% GST
  const total = subtotal + shippingFee + tax;

  // --- 4. Handle order submission ---
  const handleSubmit = async (e) => {
      e.preventDefault();
      setIsProcessing(true);
      setError('');

      const orderItems = itemsToCheckout.map(item => ({
          productId: item.id,
          quantity: item.quantity,
      }));

      const shippingAddress = {
          street: formData.address,
          city: formData.city,
          state: formData.state,
          zipCode: formData.zipCode,
          country: formData.country,
      };

      const orderDetails = { items: orderItems, shippingAddress };

      // --- Logic for Cash on Delivery ---
      // if (paymentMethod === 'cod') {
          try {
              const response = await apiClient.post('/api/orders', orderDetails);
              const createdOrder = response.data.data;

              alert('Order placed successfully! You will pay upon delivery.');

              if (!location.state?.items) {
                  clearCart();
              }
              navigate('/order-confirmation', { state: { orderId: createdOrder.id } });
          } catch (err) {
              const errorMessage = err.response?.data?.message || 'Failed to place order. Please try again.';
              setError(errorMessage); 
              console.error(err);
          } finally {
              setIsProcessing(false);
          }
          return;
      // }

      // --- Logic for Online Payments (Card / UPI) ---
      // try {
      //     // Step 1: Create the order on your backend first.
      //     const orderResponse = await apiClient.post('/api/orders', orderDetails);
      //     const backendOrder = orderResponse.data.data;

      //     // Step 2: Open the payment gateway modal.
      //     const options = {
      //         key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Your public key from .env
      //         amount: backendOrder.totalAmount * 100, // Amount in paise
      //         currency: "INR",
      //         name: "Pawradise",
      //         description: `Order #${backendOrder.id}`,
      //         order_id: backendOrder.gatewayOrderId, // This should be generated by your backend
      //         handler: function (response) {
      //             // This function is called on successful payment.
      //             // You would now verify the payment signature on your backend.
      //             // e.g., apiClient.post('/api/payment/verify', response);
      //             alert("Payment Successful!");
      //             if (!location.state?.items) { clearCart(); }
      //             navigate('/order-confirmation');
      //         },
      //         prefill: { name: formData.fullName, contact: formData.phone },
      //         theme: { color: "#8EBC38" }
      //     };
          
      //     const rzp = new window.Razorpay(options);
      //     rzp.open();
      //     // The modal is open, so we stop the processing spinner
      //     setIsProcessing(false);

      // } catch (err) {
      //     alert('Failed to initiate payment. Please try again.');
      //     console.error(err);
      //     setIsProcessing(false);
      // }
  };

  if (itemsToCheckout.length === 0) {
      return (
          <PageContainer>
              <div className="text-center py-10">
                  <h2 className="text-2xl font-semibold">Your checkout is empty.</h2>
                  <Link to="/shop" className="text-primary hover:underline mt-4 inline-block">Return to Shop</Link>
              </div>
          </PageContainer>
      );
  }

  return (
    <PageContainer>
      <div className="text-center">
        <h1 className="text-3xl font-bold text-primary mb-2">Checkout</h1>
        <p className="text-text-medium mb-8">Complete your order by providing your details below.</p>
      </div>

      <form onSubmit={handleSubmit} className="grid lg:grid-cols-3 gap-10">
        {/* Left Column: Form & Payment */}
        <div className="lg:col-span-2 space-y-8">
          {/* Delivery Form */}
          <div className="bg-white p-6 rounded-2xl shadow-lg shadow-accent/50">
            <h2 className="text-xl font-bold text-text-dark mb-4">Shipping Information</h2>
            <div className="grid sm:grid-cols-2 gap-4">
              <div className="sm:col-span-2">
                <label htmlFor="fullName" className="block text-sm font-semibold mb-2">Full Name</label>
                <input type="text" id="fullName" value={formData.fullName} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
              <div className="sm:col-span-2">
                <label htmlFor="address" className="block text-sm font-semibold mb-2">Street Address</label>
                <input type="text" id="address" value={formData.address} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
              <div>
                <label htmlFor="city" className="block text-sm font-semibold mb-2">City</label>
                <input type="text" id="city" value={formData.city} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
              <div>
                <label htmlFor="state" className="block text-sm font-semibold mb-2">State</label>
                <input type="text" id="state" value={formData.state} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
              <div>
                <label htmlFor="zipCode" className="block text-sm font-semibold mb-2">PIN Code</label>
                <input type="text" id="zipCode" value={formData.zipCode} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
              <div>
                <label htmlFor="phone" className="block text-sm font-semibold mb-2">Phone Number</label>
                <input type="tel" id="phone" value={formData.phone} onChange={handleInputChange} className="w-full border border-accent rounded-md p-3 focus:ring-2 focus:ring-primary outline-none" required />
              </div>
            </div>
          </div>

          {/* Payment Options */}
          {/* <div className="bg-white p-6 rounded-2xl shadow-lg shadow-accent/50">
            <h2 className="text-xl font-bold text-text-dark mb-4">Payment Method</h2>
            <div className="space-y-3">
              <div onClick={() => setPaymentMethod('card')} className={`border rounded-lg p-4 cursor-pointer transition-all ${paymentMethod === 'card' ? 'border-primary ring-2 ring-primary' : 'border-accent'}`}>
                  <div className="flex items-center"><BsCreditCard2Front className="mr-3 text-primary" size={24}/><span className="font-semibold">Credit / Debit Card / UPI</span></div>
              </div>
              <div onClick={() => setPaymentMethod('cod')} className={`border rounded-lg p-4 cursor-pointer transition-all ${paymentMethod === 'cod' ? 'border-primary ring-2 ring-primary' : 'border-accent'}`}>
                  <div className="flex items-center"><BsCashCoin className="mr-3 text-primary" size={24}/><span className="font-semibold">Cash on Delivery</span></div>
              </div>
            </div>
          </div> */}
        </div>

        {/* Right Column: Bill Summary */}
        <div className="lg:col-span-1">
                    <div className="bg-white p-6 rounded-2xl shadow-lg shadow-accent/50 sticky top-20">
                        <h2 className="text-xl font-bold text-primary mb-4">Your Bill</h2>
                        <div className="space-y-3">
                            {itemsToCheckout.map(item => (
                                <div key={item.id} className="flex justify-between text-sm text-text-medium">
                                    <span>{item.name} (x{item.quantity})</span>
                                    <span>â‚¹{(item.price * item.quantity).toLocaleString()}</span>
                                </div>
                            ))}
                        </div>
                        <hr className="my-4 border-accent" />
                        <div className="space-y-3">
                            <div className="flex justify-between text-text-medium"><span>Subtotal</span><span>â‚¹{subtotal.toLocaleString()}</span></div>
                            <div className="flex justify-between text-text-medium"><span>Shipping</span><span>{shippingFee === 0 ? 'Free' : `â‚¹${shippingFee.toLocaleString()}`}</span></div>
                            <div className="flex justify-between text-text-medium"><span>Taxes (GST)</span><span>â‚¹{tax.toFixed(2)}</span></div>
                            <hr className="my-2 border-accent" />
                            <div className="flex justify-between font-bold text-lg text-text-dark"><span>Grand Total</span><span>â‚¹{total.toLocaleString('en-IN', { maximumFractionDigits: 2 })}</span></div>
                        </div>
                        {error && (
                          <div className="mt-4 p-3 text-sm font-medium text-red-800 bg-red-100 rounded-lg text-center">
                              <p>{error}</p>
                          </div>
                        )}
                        <button type="submit" className="mt-6 w-full bg-primary text-white py-3 rounded-lg font-semibold hover:bg-secondary transition-colors" disabled={isProcessing}>
                            {isProcessing ? 'Processing...' : 'Place Order'}
                        </button>
                    </div>
                </div>
      </form>
    </PageContainer>
  );
}